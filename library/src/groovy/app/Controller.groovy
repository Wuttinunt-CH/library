package appimport com.vaadin.ui.VerticalLayoutimport com.vaadin.server.VaadinRequestimport com.vaadin.server.Pageimport com.vaadin.ui.Labelimport com.vaadin.grails.Grailsimport com.vaadin.ui.Tableimport com.vaadin.data.Itemimport com.vaadin.server.ExternalResourceimport com.vaadin.shared.ui.label.ContentModeimport com.vaadin.annotations.Themeimport com.vaadin.ui.Grid.SelectionModeimport com.vaadin.ui.DateFieldimport com.vaadin.ui.*//=====================================================import com.vaadin.grails.*import com.vaadin.server.*import com.vaadin.terminal.*import com.vaadin.ui.MenuBar.MenuItemimport sportstation.*import com.vaadin.annotations.*import com.vaadin.data.*import com.vaadin.shared.ui.combobox.FilteringModeimport com.vaadin.data.Property.ValueChangeEventimport com.vaadin.data.Property.ValueChangeListenerimport com.vaadin.data.util.BeanItemContainerimport java.util.*//AAXimport com.vaadin.ui.*import com.vaadin.grails.*import com.vaadin.terminal.*import com.vaadin.server.*import com.vaadin.ui.MenuBar.MenuItemimport com.vaadin.annotations.*import com.vaadin.ui.Imageimport com.vaadin.data.*import java.util.*import java.text.*import java.util.GregorianCalendarimport java.util.Dateimport groovy.time.*import app.MyUIimport app.*import app.Book_BnR.*import app.test.*import library.*import library.Table_reservationsimport java.util.Properties;import javax.mail.Message;import javax.mail.MessagingException;import javax.mail.PasswordAuthentication;import javax.mail.Session;import javax.mail.Transport;import javax.mail.internet.InternetAddress;import javax.mail.internet.MimeMessage;import java.util.Properties;import javax.mail.Message;import javax.mail.MessagingException;import javax.mail.PasswordAuthentication;import javax.mail.Session;import javax.mail.Transport;import javax.mail.internet.InternetAddress;import javax.mail.internet.MimeMessage;class Controller {        Grid gridUser		Grid gridTable        Grid gridTable2		VerticalLayout list        static Integer fine        static Integer fineD        static String userId        static String bookId	void regMember(String idcode,String prefix,String fname,String lname,int age,Character sex,		String tel,String email,String username,String password){		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");		Date date = new Date()	    String d = dateFormat.format(date)	   	Date startDate		startDate = dateFormat.parse(d);        String newDateString = dateFormat.format(startDate);        System.out.println(newDateString);        def sqlTimestamp = date.toTimestamp()        UserGroup g = Register.userGroup.getValue()      // System.out.println(sqlTimestamp);				System.out.println(g)		User user = new User()		user.setIdUser(idcode)		user.setPrefix(prefix)		user.setFname(fname)		user.setLname(lname)		user.setAge(age)		user.setSex(sex)		user.setTel(tel)		user.setEmail(email)		user.setDate_reg(sqlTimestamp)		user.setUsername(username)		user.setPassword(password)		user.setGroup(g)		user = user.save()		System.out.println("Saved")		if(user != null) {			Notification.show("บันทึกข้อมูลเรียบร้อย", Notification.Type.TRAY_NOTIFICATION);			Page.getCurrent().getJavaScript().execute("location.reload()");			}	}	void addBook(String idBook, String nameBook, String type, String publisher, Integer price){		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");		Date date = new Date()	    String d = dateFormat.format(date)	   	Date startDate		startDate = dateFormat.parse(d);        String newDateString = dateFormat.format(startDate);        System.out.println(newDateString);        def sqlTimestamp = date.toTimestamp()             	Book book = new Book()		book.setIdBook(idBook)		book.setNameBook(nameBook)		book.setTypeBook(type)		book.setPublisher(publisher)		book.setPrice(price)		book.setDateReg(sqlTimestamp)		book.setStatus("รอเจ้าหน้าที่ยืนยัน")						book = book.save()		System.out.println("Saved")		if(book != null) {			Notification.show("บันทึกข้อมูลเรียบร้อย", Notification.Type.TRAY_NOTIFICATION);			}	}	VerticalLayout loadUserView() {		  	list = new VerticalLayout();		  	String gg = "student"		    def list_user = User.executeQuery("from User where group.group_name = :g",[g:gg])            System.out.println("size of User = " + list_user.size());                         for(n in list_user) {        //    System.out.println(Drugmg.grid.getSelectedRow())                 UserView.grid.addRow(n.idUser,n.prefix,n.fname,n.lname,n.sex,n.age,n.tel,n.email,n.date_reg,n.username,n.password,n.group.group_name)                System.out.println(n.group.group_name)               	           	 }                    }         VerticalLayout loadBookView() {		  	list = new VerticalLayout();		  			    def list_book = Book.executeQuery("from Book")            System.out.println("size of Book = " + list_book.size());            String s                         for(n in list_book) {        //    System.out.println(Drugmg.grid.getSelectedRow())        		if(n.status == "พร้อมให้ยืม"){        			s = "พร้อมให้ยืม"        		} else         			s = "ไม่พร้อมให้ยืม"                BookView.grid.addRow(n.idBook,n.nameBook,n.typeBook,n.publisher,n.price,n.dateReg,s)            	           	 }                    }    void chkBook(String idBook){              boolean check = true        Integer counter = 0        char c        if(!idBook.isEmpty()){                   /* try{                            Double d = Double.parseDouble(idBook)                   }catch(NumberFormatException e){                            Notification.show("รหัสหนังสือไม่ถูกต้อง โปรดลองใหม่อีกครั้ง", Notification.Type.TRAY_NOTIFICATION)                            BorrowBook.nameBook.clear()                            BorrowBook.bookType.clear()                            BorrowBook.bookStatus.clear()                            BorrowBook.bookDateR.clear()                            BorrowBook.submit.setEnabled(false)                            check = false                  }*/                  for(int i = 0 ; i < idBook.length() ; i++){                    c = idBook.charAt(i)                        if(c >= '0' && c <= '9'){                            counter++                        }else{                            Notification.show("รหัสหนังสือไม่ถูกต้อง โปรดลองใหม่อีกครั้ง", Notification.Type.TRAY_NOTIFICATION)                            BorrowBook.nameBook.clear()                            BorrowBook.bookType.clear()                            BorrowBook.bookStatus.clear()                            BorrowBook.bookDateR.clear()                            BorrowBook.detail.setValue("")                            BorrowBook.submit.setEnabled(false)                            check = false                        }                  }                  }                  else        System.out.println("worked")        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");        Date date = new Date()    	def book = Book.executeQuery("from Book where idBook = :d",[d:idBook])    	System.out.println(idBook)    	System.out.println(book.size())    	if(book.size() != 0){    	for(n in book){    	String namebook = n.nameBook    	String typeBook = n.typeBook    	String status = n.status        String dateR = dateFormat.format(n.dateReturn)        String detail = n.detail        //Date returnDate = n.dateReturn        /*    		if(statusA == "พร้อมให้ยืม"){    			statusA = "พร้อมให้ยืม"    		}else if(statusA == "อยู่ระหว่างการยืม"){    			statusA = "อยู่ระหว่างการยืม"    		}else if(statusA == "อยู่ระหว่างการซ่อมแซม"){    			statusA = "อยู่ระหว่างการซ่อมแซม"    		}else if(statusA == "อยู่ระหว่างการจอง"){    			statusA = "อยู่ระหว่างการจอง"    		}            */    	BorrowBook.nameBook.setValue(namebook)    	BorrowBook.bookType.setValue(typeBook)    	BorrowBook.bookStatus.setValue(status)        BorrowBook.bookDateR.setValue(dateR)        BorrowBook.detail.setValue(detail)    	System.out.println(n.nameBook)    	System.out.println(n.typeBook)    	System.out.println(n.status)        System.out.println(n.dateReturn)        System.out.println(n.detail)        bookId = idBook     // เก็บข้อมูลเมื่อค้น เจอ idbook            if(status != "พร้อมให้ยืม"){                BorrowBook.submit.setEnabled(false)                BorrowBook.detail.setEnabled(false)            }else {                BorrowBook.submit.setEnabled(true)            }            if(status == "พร้อมให้ยืม"){                BorrowBook.bookDateR.setValue("--/--/----")                BorrowBook.detail.setEnabled(true)            }   		 }    	}else if(book.size() == 0 && check == true){   		 		System.out.println("book not found")   		 		Notification.show("ไม่พบข้อมูลหนังสือ", Notification.Type.TRAY_NOTIFICATION)   		 		BorrowBook.nameBook.clear()    			BorrowBook.bookType.clear()    			BorrowBook.bookStatus.clear()                BorrowBook.bookDateR.clear()                BorrowBook.detail.setValue("")    		}            }    void chkBookR(String idBook){        boolean check = true        Integer counter = 0        char c        if(idBook.length() == 10){             for(int i = 0 ; i < idBook.length() ; i++){                    c = idBook.charAt(i)                        if(c >= '0' && c <= '9'){                            counter++                        }else{                            Notification.show("รหัสหนังสือไม่ถูกต้อง โปรดลองใหม่อีกครั้ง", Notification.Type.TRAY_NOTIFICATION)                            //BookReturn.idBook.clear()                            BookReturn.nameBook.clear()                            BookReturn.bookType.clear()                            BookReturn.bookStatus.clear()                            BookReturn.dateReturn.clear()                            BookReturn.fine.setValue("")                            BookReturn.detail.setValue("")                            BookReturn.submit.setEnabled(false)                            check = false                        }                  }        }        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");        Date date = new Date()        def book = Book.executeQuery("from Book where idBook = :d",[d:idBook])        //def uu = User.executeQuery("from User where username = :e",[e:])        System.out.println(idBook)        System.out.println(book.size())        if(book.size() != 0){        for(n in book){                String intToS        String namebook = n.nameBook        String typeBook = n.typeBook        String status = n.status        String datereturn = dateFormat.format(n.dateReturn)        Date returnD = n.dateReturn        String detail = n.detail         fineD = ((((date.getTime()/1000)/60)/60)/24)-((((returnD.getTime()/1000)/60)/60)/24)                            fine = fineD*5                            if(fineD >= 0){                            intToS = Long.toString(fine)                            BookReturn.fine.setValue(intToS+".00")                            }else if(fine < 0){                                BookReturn.fine.setValue("0.00")                                fine = 0                            }        BookReturn.nameBook.setValue(namebook)        BookReturn.bookType.setValue(typeBook)        BookReturn.bookStatus.setValue(status)        BookReturn.dateReturn.setValue(datereturn)        BookReturn.detail.setValue(detail)        System.out.println(n.nameBook)        System.out.println(n.typeBook)        System.out.println(n.status)        System.out.println(n.detail)        bookId = idBook   // เก็บข้อมูลเมื่อค้น เจอ idbook            if(status == "อยู่ระหว่างการยืม"){                                BookReturn.submit.setEnabled(true)                BookReturn.detail.setEnabled(true)            }            else {                BookReturn.submit.setEnabled(false)                BookReturn.fine.setValue("0.00")            }            if(status == "พร้อมให้ยืม"){                BookReturn.dateReturn.setValue("--/--/----")            }         }        }else if(book.size() == 0 && check == true){                System.out.println("book not found")                Notification.show("ไม่พบข้อมูลหนังสือ", Notification.Type.TRAY_NOTIFICATION)                //clear                BookReturn.nameBook.clear()                BookReturn.bookType.clear()                BookReturn.bookStatus.clear()                BookReturn.dateReturn.clear()                BookReturn.fine.setValue("")                BookReturn.detail.setValue("")                BookReturn.submit.setEnabled(false)            }            }    void chkUser(String idUser){        Integer intdate = 0        String typeuser        String prefix    	def user = User.executeQuery("from User where username = :username",[username:idUser])    	if(user.size() != 0){    		for(a in user){                typeuser = a.group.group_name                prefix = a.prefix    			BorrowBook.name.setValue(prefix + " " +a.fname +"  "+ a.lname)    			BorrowBook.userType.setValue(a.group.group_name)                Integer totalB = a.group.total_borrow                userId = idUser     //เก็บค่าเมื่อ ค้นเจอ iduser                //BorrowBook.unit(a.group.total_borrow.toString())                //if(typeuser == "Student"){                    BorrowBook.total.setValue(totalB.toString())                //}else if(typeuser == "General"){                    //BorrowBook.total.setValue("5")                //}else                  //  BorrowBook.total.setValue("15")    		}    	}else {    		System.out.println("user not found")    		Notification.show("ไม่พบข้อมูลสมาชิก", Notification.Type.TRAY_NOTIFICATION)    		BorrowBook.name.clear()    		BorrowBook.userType.clear()            BorrowBook.total.clear()    	}    }    //Use to booking rooms_Jame    void addTodoItem(String idcode,Date dates,ComboBox hour,ComboBox rooms,ComboBox objective) {         	 Table_reservations a = new Table_reservations()         a.setIdcode(idcode)         a.setDates(dates)         a.setHour(hour.getValue())         a.setRooms(rooms.getValue())         a.setObjective(objective.getValue())         a = a.save()         if(a != null) {            Notification.show("Save complete", Notification.Type.TRAY_NOTIFICATION);	    getTableData()         }else {            Notification.show("กรุณากรอกให้ครบ", Notification.Type.TRAY_NOTIFICATION);         }     }	//Show booking table_Jame    void getTableData(){	def reservelist = Table_reservations.executeQuery("from Table_reservations")	Reservations.gridTable.getContainerDataSource().removeAllItems()			for(r in reservelist){		Reservations.gridTable.addRow(r.id, r.idcode, r.dates, r.hour, r.rooms, r.objective)               }    }    void getTableData1(){    def reservelist = Table_reservations.executeQuery("from Table_reservations")    Reservations2.gridTable.getContainerDataSource().removeAllItems()            for(r in reservelist){        Reservations2.gridTable.addRow(r.id, r.idcode, r.dates, r.hour, r.rooms, r.objective)               }    }	//cancel room reservations_Jame	void cancelRoom(selectedRow){		def r = Table_reservations.get(selectedRow)		if(r != null){			r.delete(flush: true)			new Notification("สละสิทธิ์สำเร็จแล้ว",           		Notification.Type.WARNING_MESSAGE).show(Page.getCurrent());getTableData1()		} 			}  void addBorrow(String username,String idBookget,Date date,String detail){                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");        DateFormat dateFormatexp = new SimpleDateFormat("dd/MM/yyyy");        //Date date = new Date()        String d = dateFormat.format(date)        String dateBorrow = dateFormatexp.format(date)        System.out.println("Test Date >> " + dateBorrow)                def sqlTimestamp = date.toTimestamp()        String typeuser = ""        Integer intdate = 0        Long id        Integer totalB        String email        String name        String namebook        def tyepUser = User.executeQuery("from User where username = :user",[user:userId])        for(t in tyepUser){            typeuser = t.group.group_name            id = t.id            totalB = t.group.total_borrow            email = t.email            name = t.fname+" "+t.lname        }            /* if(typeuser == "Student"){                intdate = 10            }else if(typeuser == "General"){                intdate = 5            }else {                intdate = 15            }            */            System.out.println(typeuser)            System.out.println(id)            //System.out.println(aa)        def dateExpGet = date + totalB        String dateExp = dateFormatexp.format(dateExpGet)        def sqlTimestampExp = dateExpGet.toTimestamp()        System.out.println(dateExp)        String state        boolean checkSave = false        //Long uid        def u = Book.executeQuery("from Book where idBook = :idbook",[idbook:bookId])                    for (o in u){                state = o.status                System.out.println(state)                namebook = o.nameBook            }                       if(state == 'อยู่ระหว่างการยืม'){                Notification.show("บันทึกล้มเหลว สถานะหนังสือ \"อยู่ระหว่างการยืม\" ", Notification.Type.TRAY_NOTIFICATION)            }else if(state == 'พร้อมให้ยืม'){            Borrow b = new Borrow()            //b.setId(1)            b.setDateBorrow(sqlTimestamp)            b.setDateReturn(sqlTimestampExp)            b.setUser(userId)            b.setAuthoritie(getUserLogin().toString())            b.setIdBook(bookId)            b = b.save(flush: true)            if(b == null){                Notification.show("บันทึกล้มเหลว", Notification.Type.TRAY_NOTIFICATION)                  }else {                    String bb = "อยู่ระหว่างการยืม"                    Book.executeUpdate("update Book b set b.status=:newStatus "+"where b.idBook=:idbook",[newStatus: bb,idbook: bookId])                    Book.executeUpdate("update Book b set b.dateReturn=:date "+"where b.idBook=:idbook",[date: sqlTimestampExp,idbook: bookId])                    Book.executeUpdate("update Book b set b.detail=:newDetail "+"where b.idBook=:idbook",[newDetail: detail,idbook: bookId])                    Notification.show("บันทึกรายการยืม สำเร็จ รหัสสมาชิก [ " + userId + " ] รหัสหนังสือ [ " + bookId + " ]", Notification.Type.TRAY_NOTIFICATION)                    BorrowBook.bookStatus.setValue("อยู่ระหว่างการยืม")                    BorrowBook.bookDateR.setValue(dateExp)                    BorrowBook.detail.setValue(detail)                    //UI.getCurrent().addWindow(new MySub(String a))                                        UI.getCurrent().addWindow(new MySub(userId,dateExpGet,bookId,dateBorrow,intdate));                                        BorrowBook.submit.setEnabled(false)                    BorrowBook.detail.setEnabled(false)                    checkSave = true                                        //BorrowBook.cancel.setCaption("ล้าง")                                System.out.println("username >>"+name)                System.out.println("email >>"+email)                        }            }            else if(state == 'อยู่ระหว่างการส่งซ่อม'){                Notification.show("บันทึกล้มเหลว สถานะหนังสือ \"อยู่ระหว่างการส่งซ่อม\" ", Notification.Type.TRAY_NOTIFICATION)                }else if(state == 'อยู่ระหว่างการจอง'){                    Notification.show("บันทึกล้มเหลว สถานะหนังสือ \"อยู่ระหว่างการจอง\" ", Notification.Type.TRAY_NOTIFICATION)                }                if(checkSave == true){            sendMail(username,name,email,namebook,d,dateExp,idBookget)        }                }    void addBorrowReturn(String idBookget,String detail){               DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");        DateFormat dateFormatexp = new SimpleDateFormat("dd/MM/yyyy");        Date date = new Date()        String d = dateFormat.format(date)        def sqlTimestamp = date.toTimestamp()        String state        Date returnD        System.out.println(fine)        def u = Book.executeQuery("from Book where idBook = :idbook",[idbook:bookId])        //def uu = User.executeQuery("")            for (o in u){                state = o.status                System.out.println(state)            }                    if(state == "อยู่ระหว่างการยืม"){                                        Return r = new Return()                    //String atr = getUserLogin()                    r.setDateReturn(sqlTimestamp)                    r.setIdBook(bookId)                    r.setAuthoritie(getUserLogin().toString())                    r.setFine(fine)                    r = r.save(flush: true)                    if(r != null){                        String bb = "พร้อมให้ยืม"                                                Book.executeUpdate("update Book b set b.status=:newStatus "+"where b.idBook=:idbook",[newStatus: bb,idbook: bookId])                        Book.executeUpdate("update Book b set b.dateReturn=:date "+"where b.idBook=:idbook",[date: sqlTimestamp,idbook: bookId])                        Book.executeUpdate("update Book b set b.detail=:newDetail "+"where b.idBook=:idbook",[newDetail: detail,idbook: bookId])                        UI.getCurrent().addWindow(new MySubR(bookId,fine,fineD))                            Notification.show("บันทึกรายการคืน สำเร็จ รหัสหนังสือ[ "+ bookId + " ]", Notification.Type.TRAY_NOTIFICATION)                                BookReturn.bookStatus.setValue("พร้อมให้ยืม")                                BookReturn.submit.setEnabled(false)                                BookReturn.detail.setValue(detail)                                BookReturn.detail.setEnabled(false)                                //sendMail();                    }                    else                        Notification.show("บันทึกรายการคืน ล้มเหลว ", Notification.Type.TRAY_NOTIFICATION)                    }    }////////เพิ่มข้อมูลสมาชิก///////    void addUser(String username,String password,String prefix,String fname,String lname,Character sex,Integer age,        String tel,String email,Date dateReg){        UserGroup typeU = AddUser.typeUser.getValue()        System.out.println(username)        System.out.println(password)        System.out.println(prefix)        System.out.println(fname)        System.out.println(lname)        System.out.println(sex)        System.out.println(age)        System.out.println(tel)        System.out.println(email)                System.out.println(typeU)        DateFormat formatT = new SimpleDateFormat("dd/MM/yyyy");        //Date date = new Date()        //String d = formatT.format(dateReg)        def ta = dateReg.toTimestamp()        System.out.println(ta)        User u = new User()        //u.setId(1)        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");        Date date = new Date()        String d = dateFormat.format(dateReg)        Date startDate        startDate = dateFormat.parse(d);        String newDateString = dateFormat.format(startDate);        System.out.println(newDateString);        def sqlTimestamp = dateReg.toTimestamp()        UserGroup g = AddUser.typeUser.getValue()      // System.out.println(sqlTimestamp);        System.out.println(g)        User user = new User()        //user.setIdUser(idcode)        user.setPrefix(prefix)        user.setFname(fname)        user.setLname(lname)        user.setAge(age)        user.setSex(sex)        user.setTel(tel)        user.setEmail(email)        user.setDate_reg(sqlTimestamp)        user.setUsername(username)        user.setPassword(password)        user.setGroup(g)        user = user.save()        if(user == null){            Notification.show("บันทึก ้มเหลว ", Notification.Type.TRAY_NOTIFICATION)        }else if(user != null){            Notification.show("บันทึก สำเร็จ ", Notification.Type.TRAY_NOTIFICATION)        }    }/////////แสดงข้อมูลสมาชิก/////    void getTableUser(){    def userlist = User.executeQuery("from User")    UserShow.gridUser.getContainerDataSource().removeAllItems()            for(ud in userlist){        UserShow.gridUser.addRow(ud.username, ud.password, ud.prefix, ud.fname, ud.lname, ud.sex, ud.age, ud.tel, ud.email, ud.date_reg)       }    }/////////ลบข้อมูลสมาชิก//////    void deleteUser(selectedRow){        def ud = User.get(selectedRow)        if(ud != null){            ud.delete(flush: true)            new Notification("ทำการลบข้อมูลสมาชิกเรียบร้อย",                Notification.Type.WARNING_MESSAGE).show(Page.getCurrent());getTableUser()        }       }        void clearB(){    	BorrowBook.idUser.clear()        BorrowBook.name.clear()       	BorrowBook.userType.clear()        BorrowBook.idBook.clear()        BorrowBook.nameBook.clear()        BorrowBook.bookType.clear()        BorrowBook.bookStatus.clear()        BorrowBook.total.clear()        BorrowBook.bookDateR.clear()        BorrowBook.detail.setValue("")        BorrowBook.submit.setEnabled(false)    }    void clearR(){         BookReturn.idBook.clear()         BookReturn.nameBook.clear()         BookReturn.bookType.clear()         BookReturn.bookStatus.clear()          BookReturn.dateReturn.clear()         BookReturn.fine.clear()         BookReturn.detail.setValue("")                  //BookReturn.total.clear()         BookReturn.submit.setEnabled(false)    }		void addTodoItemboss(String idtool,String nametool,String number,Date datelend,Date datereturn,Long idname,String fname,String lname){        Tool tool = new Tool()        tool.setIdtool(idtool)        tool.setNametool(nametool)        tool.setNumber(number)                tool.setDatelend(datelend)        tool.setDatereturn(datereturn)        tool.setIdname(idname)        tool.setFname(fname)        tool.setLname(lname)        tool = tool.save()              if(tool != null) {            Notification.show("Save complete", Notification.Type.TRAY_NOTIFICATION);        getTableDataBoss()        }else {            Notification.show("กรุณากรอกให้ครบ", Notification.Type.TRAY_NOTIFICATION);        }    }    void getTableDataBoss(){    def tools = Tool.executeQuery("from Tool")    gridTable2.getContainerDataSource().removeAllItems()    for(r1 in tools){        gridTable2.addRow(r1.idtool, r1.nametool, r1.number, r1.datelend, r1.datereturn,r1.idname,r1.fname,r1.lname)    }    }    String getUserLogin() {        Object c = UI.getCurrent().getSession().getAttribute("login")        return c    }           String sendMail(String username ,String name,String email,String nameBook,String dateBorrow, String dateReturn,String idBook){        Properties props = new Properties();        props.put("mail.smtp.host", "smtp.gmail.com");        props.put("mail.smtp.socketFactory.port", "465");        props.put("mail.smtp.socketFactory.class",                "javax.net.ssl.SSLSocketFactory");        props.put("mail.smtp.auth", "true");        props.put("mail.smtp.port", "465");        Session session = Session.getDefaultInstance(props,            new javax.mail.Authenticator() {                protected PasswordAuthentication getPasswordAuthentication() {                    return new PasswordAuthentication("noreply.library.sut","library1234");                }            });        try {            Message message = new MimeMessage(session);            message.setFrom(new InternetAddress("noreply.library.sut@gmail.com"));            message.setRecipients(Message.RecipientType.TO,                    InternetAddress.parse(email));            message.setSubject("แจ้งเตือนเรื่องการยืมหนังสือ"+" [ "+nameBook+" ]");            message.setText("ถึง คุณ , " +name+ "  รหัสสมาชิก : " +username.toUpperCase()+                    "\n\nคุณได้ทำการยืมหนังสือ เรื่อง ["+nameBook+"]"+"\nรหัสหนังสือ : "+idBook+"\nวันที่ยืม : "+dateBorrow+"\nกำหนดส่ง : " + dateReturn+"\n\n\n ศูนย์บรรณสารและสื่อการศึกษา มทส.");            Transport.send(message);            System.out.println("Done");        } catch (MessagingException e) {            throw new RuntimeException(e);        }        return "Don"    }    	}